// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	configs "github.com/KejawenLab/bima/v2/configs"
	grpc "google.golang.org/grpc"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// Route is an autogenerated mock type for the Route type
type Route struct {
	mock.Mock
}

// Handle provides a mock function with given fields: w, r, params
func (_m *Route) Handle(w http.ResponseWriter, r *http.Request, params map[string]string) {
	_m.Called(w, r, params)
}

// Method provides a mock function with given fields:
func (_m *Route) Method() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Middlewares provides a mock function with given fields:
func (_m *Route) Middlewares() []configs.Middleware {
	ret := _m.Called()

	var r0 []configs.Middleware
	if rf, ok := ret.Get(0).(func() []configs.Middleware); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]configs.Middleware)
		}
	}

	return r0
}

// Path provides a mock function with given fields:
func (_m *Route) Path() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SetClient provides a mock function with given fields: client
func (_m *Route) SetClient(client *grpc.ClientConn) {
	_m.Called(client)
}

type NewRouteT interface {
	mock.TestingT
	Cleanup(func())
}

// NewRoute creates a new instance of Route. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRoute(t NewRouteT) *Route {
	mock := &Route{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
