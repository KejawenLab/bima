// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"

	paginations "github.com/KejawenLab/bima/v2/paginations"
	mock "github.com/stretchr/testify/mock"

	paginator "github.com/vcraescu/go-paginator/v2"
)

// Adapter is an autogenerated mock type for the Adapter type
type Adapter struct {
	mock.Mock
}

// CreateAdapter provides a mock function with given fields: ctx, _a1
func (_m *Adapter) CreateAdapter(ctx context.Context, _a1 paginations.Pagination) paginator.Adapter {
	ret := _m.Called(ctx, _a1)

	var r0 paginator.Adapter
	if rf, ok := ret.Get(0).(func(context.Context, paginations.Pagination) paginator.Adapter); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(paginator.Adapter)
		}
	}

	return r0
}

type NewAdapterT interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdapter creates a new instance of Adapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdapter(t NewAdapterT) *Adapter {
	mock := &Adapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
